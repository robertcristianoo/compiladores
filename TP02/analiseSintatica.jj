/* 
    Authors: Paulo Augusto, Robert Cristiano
    last edit: 10/05/2019
    by: Robert Cristiano
 */

 options { 
  STATIC=false; 
} 
 
PARSER_BEGIN(analiseSintatica)

// import java.io.PrintStream ; 

// public class analiseSintatica {
	// double previousValue = 0.0 ;
    // final static String Version = "0.0.1";

    // public static void main(String args[]) throws ParseException { 
     // analiseSintatica parser = new analiseSintatica(System.in);    
    // while (true) { 
      // try { 
      	    // parser.Start(System.out);       
      // } catch (Exception e) { 
        // System.out.println("NOK."); 
        // System.out.println(e.getMessage()); 
        // parser.ReInit(System.in); 
      // } catch (Error e) { 
        // System.out.println("Oops."); 
        // System.out.println(e.getMessage()); 
        // break; 
      // } 
    // } 
  // } 
// }

public class analiseSintatica {
	public static void main(String args[]) throws Exception{
		double result = new analiseSintatica(new java.io.StringReader(args[0])).S();
		System.out.println(result);
	}
}

PARSER_END(analiseSintatica)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

// TOKEN: {
    // < EOL: "\n" | "\r" | "\r\n"  >
// }

/***********************************************
 * THE PASCAL TURBO RESERVERD WORDS START HERE *
 ***********************************************/

TOKEN :
{
  < ABSOLUTE: "Absolute" >
| < AND: "And" >
| < ARRAY: "Array" >
| < ASM: "Asm" >
| < BEGIN: "Begin" >
| < CASE: "Case" >
| < CONST: "Const" >
| < CONSTRUCTOR: "Constructor" >
| < DESTRUCTOR: "Destructor" >
| < DIV: "Div" >
| < DO: "Do" >
| < DOWNTO: "Downto" >
| < ELSE: "Else" >
| < END: "End" >
| < FILE: "File" >
| < FOR: "For" >
| < FUNCTION: "Function" >
| < GOTO: "Goto" >
| < IF: "If" >
| < IMPLEMENTATION: "Implementation" >
| < IN: "In" >
| < INHERITED: "Inherited" >
| < INLINE: "Inline" >
| < INTERFACE: "Interface" >  
| < LABEL: "Label" >  
| < MOD: "Mod" >
| < NIL: "Nil" >
| < NOT: "Not" >
| < OBJECT: "Object" >
| < OF: "Of" >
| < OPERATOR: "Operator" >
| < OR: "Or" >
| < PACKED: "Packed" >
| < PROCEDURE: "Procedure" >
| < PROGRAM: "Program" >
| < RECORD: "Record" >
| < REINTRODUCE: "Reintroduce" >
| < REPEAT: "Repeat" >
| < SELF: "Self" >
| < SET: "Set" >
| < SHL: "Shl" >
| < SHR: "Shr" >
| < STRINGR: "String" >
| < THEN: "Then" >
| < TO: "To" >
| < TYPE: "Type" >
| < UNIT: "Unit" >
| < UNTIL: "Until" >
| < USERS: "Uses" >
| < VAR: "Var" >
| < WHILE: "While" >
| < WITH: "With" >
| < XORR: "Xor" >
| < ABSTRACT: "Abstract" >
| < ALIAS: "Alias" >
| < ASSEMBLER: "Assembler" >
| < BITPACKED: "Bitpacked" >
| < BREAK: "Break" >
| < CDECL: "Cdecl" >
| < CONTINUE: "Continue" >
| < CPPDECL: "Cppdecl" >
| < CVAR: "Cvar" >
| < DEFAULTR: "Default" >
| < DEPRECATED: "Deprecated" >
| < DYNAMIC: "Dynamic" >
| < ENUMERATOR: "Enumerator" >
| < EXPERIMENTAL: "Experimental" >
| < EXPORT: "Export" >
| < EXTERNAL: "External" >
| < FAR: "Far" >
| < FAR16: "Far16" >
| < FORWARD: "Forward" >
| < GENERIC: "Generic" >
| < HELPER: "Helper" >
| < IMPLEMENTS: "Implements" >
| < INDEX: "Index" >
| < INTERRUPT: "Interrupt" >
| < IOCHECK: "Iocheck" >
| < LOCAL: "Local" >
| < MESSAGE: "Message" >
| < NAME: "Name" >
| < NEAR: "Near" >
| < NODEFAULT: "Nodefault" >
| < NORETURN: "Noreturn" >
| < NOSTACKFRAME: "Nostackframe" >
| < OLDFPCCALL: "Oldfpccall" >
| < OTHERWISE: "Otherwise" >
| < OVERLOAD: "Overload" >
| < OVERRIDE: "Override" >
| < PASCAL: "Pascal" >
| < PLATFORM: "Platform" >
| < PRIVATE: "Private" >
| < PROTECTED: "Protected" >
| < PUBLIC: "Public" >
| < PUBLISHED: "Published" >
| < READ: "Read" >
| < REGISTER: "Register" >
| < RESULT: "Result" >
| < SAFECALL: "Safecall" >
| < SAVEREGISTERS: "Saveregisters" >
| < SOFTFLOAT: "Softfloat" >
| < SPECIALIZE: "Specialize" >
| < STACTIC: "Static" >
| < SDTCALL: "Stdcall" >
| < STORED: "Stored" >
| < STRICT: "Strict" >
| < UNALIGNED: "Unaligned" >
| < UNIMPLEMENTED: "Unimplemented" >
| < VARARGS: "Varargs" >
| < VIRUAL: "Virtual" >
| < IS: "Is" >
| < AS: "As" >
| < WRITE: "Write" >
}

/*************************************************
 * THE PASCAL TURBO NUMBER, NUMBER_FLOAT, STRING *
 *************************************************/

TOKEN :
{
  < NUM: 
        ("-")? ["1"-"9"] (["0"-"9"])* 
      | ["0"]
  >
|
  < FLOAT_NUM:
        ("-")? (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
      | (["0"-"9"])+ (<EXPONENT>)?
  >
|  
  < #EXPONENT: 
      ["e","E"] (["+","-"])? (["0"-"9"])+
  >
|
  < STRING:
      "\'"
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\'"
  >
}

/*************************************************
 *        THE PASCAL TURBO IDENTIFIERS           *
 *************************************************/

TOKEN :
{
  < ID: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      ["A"-"Z","_","a"-"z"]
  >
|
  < #DIGIT:
      ["0"-"9"]
  >
}

/*************************************************
 *        THE PASCAL TURBO SYMBOLS               *
 *************************************************/

TOKEN :
{
  < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < EQUALS: "=" >
| < LT: "<" >
| < GT: ">" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < DOT: "." >
| < COMMA: "," >
| < SEMICOLON: ";" >
| < LPAREN: "(" >
| < RPAREN: ")" >
| < COLON: ":" >
| < XOR: "^" >
| < ARROBA: "@" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < CIFRAO: "$" >
| < HASHTAG: "#" >
| < BIT_AND: "&" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < STARSTAR: "**" >
| < LTGT: "<>" >
| < GTLT: "><" >
| < LOE: "<=" >
| < GOE: ">=" >
| < ATRIB: ":=" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ABRESTAR: "(*" >
| < STARFECHA: "*)" >
| < ABREDOT: "(." >
| < DOTFECHA: ".)" >
| < BARRABARRA: "//" >
| < BOOLEAN: (<TRUE> | <FALSE>) >
| < #TRUE: "True" >
| < #FALSE: "False" >
}

// TOKEN :
// {
  // < EXPRESSION: <SIMPLE_EXPRESSION> <LOGICAL_OP> <SIMPLE_EXPRESSION> >
// |
  // < #SIMPLE_EXPRESSION: <ADDING_OP> <TERM> <ADDING_OP> >
// |
  // < #TERM: <MULTI_OP> <FACTOR> <MULTI_OP> >
// |
  // < #LOGICAL_OP: <LT> | <LOE> | <GT> | <GOE> | <EQUALS> | <LTGT> >
// |
  // < #ADDING_OP: <PLUS> | <MINUS> | <OR> | <XORR> >
// |
  // < #MULTI_OP: <STAR> | <SLASH> | <DIV> | <MOD> | <AND> | <SHL> | <SHR> | <AS> >
// |
  // < #FACTOR: <LPAREN> <EXPRESSION> <RPAREN> | <NOT> <FACTOR> >
// }

/************************************************
 * THE PASCAL GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/

double Start(): {double value=0.0;}
{
  value = S() {return value;}
}

double S(): {double x, value=0.0;}
{
  value = T() 
  (
		<PLUS>x = T() {value += x;} 
	| 
		<MINUS>x = T() {value -= x;}
	// |
		// <OR>x = T() {value = 1}
   )* {return value;}
}

double T(): {double x, value=0.0;}
{
  value = F() (<STAR>x = F() {value *= x;} | <SLASH>x = F() {value /= x;})* 
  {return value;}
}

double F(): {double x; Token t;}
{
  t = <NUM> {return Double.parseDouble(t.image);}
|
  t = <FLOAT_NUM> {return Double.parseDouble(t.image);}
|
  <LPAREN> x = S() <RPAREN> {return x;}
|
  <MINUS> x = F() {return -x;}
// |
  // <NOT> x = F() {return x;}
}