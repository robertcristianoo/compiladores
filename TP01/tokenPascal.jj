/* 
    Authors: Paulo Augusto, Robert Cristiano
    last edit: 24/03/2019
    by: Robert Cristiano
 */

PARSER_BEGIN(tokenPascal)

/** Simple brace matcher. */
public class tokenPascal {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    tokenPascal parser;
    if (args.length == 0) {
          System.out.println("Pascal Parser:  Reading from standard input . . .");
          parser = new tokenPascal(System.in);
        } else if (args.length == 1) {
          System.out.println("Pascal Parser:  Reading from file " + args[0] + " . . .");
          try {
            parser = new tokenPascal(new java.io.FileInputStream(args[0]));
          } catch (java.io.FileNotFoundException e) {
            System.out.println("Pascal Parser:  File " + args[0] + " not found.");
            return;
          }
        } else {
          System.out.println("Pascal Parser:  Usage is one of:");
          System.out.println("         java tokenPascal < inputfile");
          System.out.println("OR");
          System.out.println("         java tokenPascal inputfile");
          return;
        }
        try {
          parser.pascal_input();
          System.out.println("Pascal Parser:  Java program parsed successfully.");
        } catch (ParseException e) {
          System.out.println(e.getMessage());
          System.out.println("Pascal Parser:  Encountered errors during parse.");
        }
  }
}

PARSER_END(tokenPascal)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

/***********************************************
 * THE PASCAL TURBO RESERVERD WORDS START HERE *
 ***********************************************/

TOKEN :
{
  < ABSOLUTE: "Absolute" >
| < AND: "And" >
| < ARRAY: "Array" >
| < ASM: "Asm" >
| < BEGIN: "Begin" >
| < CASE: "Case" >
| < CONST: "Const" >
| < CONSTRUCTOR: "Constructor" >
| < DESTRUCTOR: "Destructor" >
| < DIV: "Div" >
| < DO: "Do" >
| < DOWNTO: "Downto" >
| < ELSE: "Else" >
| < END: "End" >
| < FILE: "File" >
| < FOR: "For" >
| < FUNCTION: "Function" >
| < GOTO: "Goto" >
| < IF: "If" >
| < IMPLEMENTATION: "Implementation" >
| < IN: "In" >
| < INHERITED: "Inherited" >
| < INLINE: "Inline" >
| < INTERFACE: "Interface" >  
| < LABEL: "Label" >  
| < MOD: "Mod" >
| < NIL: "Nil" >
| < NOT: "Not" >
| < OBJECT: "Object" >
| < OF: "Of" >
| < OPERATOR: "Operator" >
| < OR: "Or" >
| < PACKED: "Packed" >
| < PROCEDURE: "Procedure" >
| < PROGRAM: "Program" >
| < RECORD: "Record" >
| < REINTRODUCE: "Reintroduce" >
| < REPEAT: "Repeat" >
| < SELF: "Self" >
| < SET: "Set" >
| < SHL: "Shl" >
| < SHR: "Shr" >
| < STRINGR: "String" >
| < THEN: "Then" >
| < TO: "To" >
| < TYPE: "Type" >
| < UNIT: "Unit" >
| < UNTIL: "Until" >
| < USERS: "Uses" >
| < VAR: "Var" >
| < WHILE: "While" >
| < WITH: "With" >
| < XORR: "Xor" >
| < ABSTRACT: "Abstract" >
| < ALIAS: "Alias" >
| < ASSEMBLER: "Assembler" >
| < BITPACKED: "Bitpacked" >
| < BREAK: "Break" >
| < CDECL: "Cdecl" >
| < CONTINUE: "Continue" >
| < CPPDECL: "Cppdecl" >
| < CVAR: "Cvar" >
| < DEFAULTR: "Default" >
| < DEPRECATED: "Deprecated" >
| < DYNAMIC: "Dynamic" >
| < ENUMERATOR: "Enumerator" >
| < EXPERIMENTAL: "Experimental" >
| < EXPORT: "Export" >
| < EXTERNAL: "External" >
| < FAR: "Far" >
| < FAR16: "Far16" >
| < FORWARD: "Forward" >
| < GENERIC: "Generic" >
| < HELPER: "Helper" >
| < IMPLEMENTS: "Implements" >
| < INDEX: "Index" >
| < INTERRUPT: "Interrupt" >
| < IOCHECK: "Iocheck" >
| < LOCAL: "Local" >
| < MESSAGE: "Message" >
| < NAME: "Name" >
| < NEAR: "Near" >
| < NODEFAULT: "Nodefault" >
| < NORETURN: "Noreturn" >
| < NOSTACKFRAME: "Nostackframe" >
| < OLDFPCCALL: "Oldfpccall" >
| < OTHERWISE: "Otherwise" >
| < OVERLOAD: "Overload" >
| < OVERRIDE: "Override" >
| < PASCAL: "Pascal" >
| < PLATFORM: "Platform" >
| < PRIVATE: "Private" >
| < PROTECTED: "Protected" >
| < PUBLIC: "Public" >
| < PUBLISHED: "Published" >
| < READ: "Read" >
| < REGISTER: "Register" >
| < RESULT: "Result" >
| < SAFECALL: "Safecall" >
| < SAVEREGISTERS: "Saveregisters" >
| < SOFTFLOAT: "Softfloat" >
| < SPECIALIZE: "Specialize" >
| < STACTIC: "Static" >
| < SDTCALL: "Stdcall" >
| < STORED: "Stored" >
| < STRICT: "Strict" >
| < UNALIGNED: "Unaligned" >
| < UNIMPLEMENTED: "Unimplemented" >
| < VARARGS: "Varargs" >
| < VIRUAL: "Virtual" >
| < WRITE: "Write" >
}

/*************************************************
 * THE PASCAL TURBO NUMBER, NUMBER_FLOAT, STRING *
 *************************************************/

TOKEN :
{
  < NUM: ["1"-"9"] (["0"-"9"])* >
|
  < NUM_FLOAT:
        (["0"-"9"])+ "." (["0"-"9"])* ["e","E"] (["+","-"])? (["0"-"9"])+
      | "." (["0"-"9"])+ ["e","E"] (["+","-"])? (["0"-"9"])+
      | (["0"-"9"])+ ["e","E"] (["+","-"])? (["0"-"9"])+
      | (["0"-"9"])+ ["e","E"] (["+","-"])? (["0"-"9"])+
  >
|
  < STRING:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/*************************************************
 *        THE PASCAL TURBO IDENTIFIERS           *
 *************************************************/

TOKEN :
{
  < ID: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/*************************************************
 *        THE PASCAL TURBO SYMBOLS               *
 *************************************************/

TOKEN :
{
  < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < EQUALS: "=" >
| < LT: "<" >
| < GT: ">" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < DOT: "." >
| < COMMA: "," >
| < SEMICOLON: ";" >
| < LPAREN: "(" >
| < RPAREN: ")" >
| < COLON: ":" >
| < XOR: "^" >
| < ARROBA: "@" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < CIFRAO: "$" >
| < HASHTAG: "#" >
| < BIT_AND: "&" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < STARSTAR: "**" >
| < LTGT: "<>" >
| < GTLT: "><" >
| < LOE: "<=" >
| < GOE: ">=" >
| < ATRIB: ":=" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ABRESTAR: "(*" >
| < STARFECHA: "*)" >
| < ABREDOT: "(." >
| < DOTFECHA: ".)" >
| < BARRABARRA: "//" >
}

/************************************************
 * THE PASCAL GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/

void pascal_input() :
{}
{
  <PROGRAM> <ID> <SEMICOLON>
  <EOF>
}
